<?php

class A
{
    public function foo()
    {
        static $x = 0;
        echo ++$x;
    }
}

$a1 = new A();
$a2 = new A();
$a1->foo(); // выведет 1
$a2->foo(); // выведет 2
$a1->foo(); // выведет 3
$a2->foo(); // выведет 4

// переменная $x принадлежит классу, потому что написали static, поэтому каждый раз, вызывая метод foo(), значение
// $x увеличивается

echo "<hr>";

class С {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
class B extends С {
}
$a1 = new С();
$b1 = new B();
$a1->foo(); // выведет 1
$b1->foo(); // выведет 1
$a1->foo(); // выведет 2
$b1->foo(); // выведет 2

// переменная $x принадлежит class C, потому что написали static, class B включает в себя объекты и методы class C.
// Т.к. переменная $x принадлежит class C, то при обращении к методу foo() из class B она еще не создана. Поэтому в 35
// строке мы получим 1, ведь из class B мы обращаемся к методу впервые.